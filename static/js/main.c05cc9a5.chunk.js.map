{"version":3,"sources":["components/HeaderComponents.js","components/CardsSection.js","App.js","index.js"],"names":["HeaderComponents","props","maxScoreToWin","id","score","highScore","Card","useState","text","className","onClick","src","imgSrc","CardsSection","cards","map","step","move","index","renderCard","shuffleCardsList","sort","Math","random","App","setNewGame","setScore","setHighScore","clickedImagesList","setClickedImagesList","setCards","WINNING_SCORE","length","resetGame","handleClick","imgLink","find","image","alert","concat","useEffect","i","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAwBeA,G,MArBU,SAACC,GACtB,OACI,iCACI,gCACI,8CAAgB,sFAAyDA,EAAMC,cAA/D,yBAChB,sBAAKC,GAAG,kBAAR,UACI,gCACI,sCACA,6BAAKF,EAAMG,WAGf,gCACI,0CACA,6BAAKH,EAAMI,yBCd7BC,EAAO,SAACL,GAAW,IAAD,EACQM,mBAAS,KADjB,gCAEIA,mBAASN,EAAMO,OAFnB,6BAIpB,OACI,qBAAKC,UAAU,OAAOC,QAAST,EAAMS,QAArC,SACI,qBAAKC,IAAKV,EAAMW,YA6BbC,EAxBM,SAACZ,GAiBlB,OACI,+BANOA,EAAMa,MAAMC,KAAI,SAACC,EAAMC,GAC1B,OAZW,SAACD,EAAME,GACtB,OACI,cAAC,EAAD,CACIN,OAAQI,EAERN,QAAS,kBAAMT,EAAMS,QAAQM,KADxBE,GAQFC,CAAWH,EAAMC,SCHpC,SAASG,EAAiBN,GACtB,OAAOA,EAAMO,MAAK,kBAAMC,KAAKC,SAAW,MAG5C,IAwDeC,EAxDH,WAAO,IAAD,EACgBjB,oBAAS,GADzB,mBACEkB,GADF,aAEYlB,mBAAS,GAFrB,mBAEPH,EAFO,KAEAsB,EAFA,OAGoBnB,mBAAS,GAH7B,mBAGPF,EAHO,KAGIsB,EAHJ,OAIoCpB,mBAAS,IAJ7C,mBAIPqB,EAJO,KAIYC,EAJZ,OAKYtB,mBAZnBa,EAdK,CACR,6EACA,4EACA,6EACA,6EACA,4FACA,6EACA,6EACA,6EACA,6EACA,6EACA,6EACA,gFASU,mBAKPN,EALO,KAKAgB,EALA,KAMRC,EAAgBjB,EAAMkB,OAKtBC,EAAY,WACdP,EAAS,GACTD,GAAW,GACXI,EAAqB,KAGnBK,EAAc,SAACC,GACjB,GAAIP,EAAkBQ,MAAK,SAAAC,GAAK,OAAIA,GAASF,KAGzC,OAFAG,MAAM,gDACNL,IAZqBP,EAAStB,EAAQ,GAiB1CyB,EAAqBD,EAAkBW,OAAOJ,KAelD,OAZAK,qBAAU,WAlBwBpC,EAAQC,GADZsB,EAAavB,GAuBnCA,GAAS2B,IACTO,MAAM,sGACNL,KAGJH,EAASV,EAAiBN,MAC3B,CAACV,IAGA,sBAAKK,UAAU,MAAf,UACI,cAAC,EAAD,CACIL,MAAOA,EACPC,UAAWA,EACXH,cAAe6B,IAGnB,cAAC,EAAD,CACIjB,MAAOA,EACPJ,QAAS,SAAC+B,GAAD,OAAOP,EAAYO,UCzE5CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c05cc9a5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst HeaderComponents = (props) => { \r\n    return (\r\n        <header>\r\n            <div>\r\n                <h1>Memory Card <span>(click on images you haven't selected yet...score {props.maxScoreToWin} points to win!)</span></h1>\r\n                <div id=\"score-container\">\r\n                    <div>\r\n                        <p>Score</p>\r\n                        <h2>{props.score}</h2>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                        <p>Top Score</p>\r\n                        <h2>{props.highScore}</h2>                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    );       \r\n}\r\n\r\nexport default HeaderComponents;","import React, { useState } from 'react';\r\n\r\nconst Card = (props) => {\r\n    const [imgSrc, setImgSrc] = useState('#');\r\n    const [text, setText] = useState(props.text);\r\n    \r\n    return (\r\n        <div className=\"card\" onClick={props.onClick}>\r\n            <img src={props.imgSrc}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CardsSection = (props) => {\r\n    const renderCard = (step, index) => {\r\n        return (\r\n            <Card\r\n                imgSrc={step}\r\n                key={index}\r\n                onClick={() => props.onClick(step)}\r\n            />\r\n        )\r\n    };\r\n    \r\n    const buildCards = () => {\r\n        return props.cards.map((step, move) => {\r\n            return renderCard(step, move);\r\n        });\r\n    }\r\n    \r\n    return (\r\n        <main>\r\n            {buildCards()}\r\n        </main>\r\n    );       \r\n}\r\n\r\nexport default CardsSection;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport HeaderComponents from './components/HeaderComponents.js';\nimport CardsSection from './components/CardsSection.js';\n\nfunction getCardsList() {\n    let cards = [\n        'https://pixnio.com/free-images/2020/07/24/2020-07-24-08-42-56-1200x800.jpg',\n        'https://pixnio.com/free-images/2017/06/08/2017-06-08-14-10-56-900x616.jpg',\n        'https://pixnio.com/free-images/2019/08/30/2019-08-30-09-48-35-1200x800.jpg',\n        'https://pixnio.com/free-images/2020/11/07/2020-11-07-11-56-49-1200x800.jpg',\n        'https://pixnio.com/free-images/2019/07/23/2019-07-23-04-12-56-e1563867744800-1200x900.jpg',\n        'https://pixnio.com/free-images/2019/08/30/2019-08-30-10-12-28-1200x800.jpg',\n        'https://pixnio.com/free-images/2018/12/05/2018-12-05-11-33-36-1200x900.jpg',\n        'https://pixnio.com/free-images/2020/02/07/2020-02-07-09-23-06-1200x800.jpg',\n        'https://pixnio.com/free-images/2018/11/11/2018-11-11-15-55-55-1200x803.jpg',\n        'https://pixnio.com/free-images/2018/07/27/2018-07-27-14-38-13-1200x800.jpg',\n        'https://pixnio.com/free-images/2019/09/07/2019-09-07-12-07-23-1200x800.jpg',\n        'https://pixnio.com/free-images/2020/09/09/2020-09-09-11-04-30-1200x800.jpg'\n    ];\n    return shuffleCardsList(cards);\n}\n\nfunction shuffleCardsList(cards) {\n    return cards.sort(() => Math.random() - 0.5);\n}\n\nconst App = () => {\n    const [newGame, setNewGame] = useState(true);\n    const [score, setScore] = useState(0);\n    const [highScore, setHighScore] = useState(0);\n    const [clickedImagesList, setClickedImagesList] = useState([]);\n    const [cards, setCards] = useState(getCardsList());\n    const WINNING_SCORE = cards.length;\n    \n    const incrementScore = () => setScore(score + 1);\n    const updateHighScore = () => setHighScore(score);\n    const willUpdateHighScore = () => score > highScore;\n    const resetGame = () => {\n        setScore(0);\n        setNewGame(true);\n        setClickedImagesList([]);\n    }\n    \n    const handleClick = (imgLink) => {\n        if (clickedImagesList.find(image => image == imgLink)) {\n            alert(\"You already clicked that! Back to zero!\");\n            resetGame();\n            return;\n        }\n        \n        incrementScore();       \n        setClickedImagesList(clickedImagesList.concat(imgLink));\n    }\n    \n    useEffect(() => {\n        if (willUpdateHighScore()) updateHighScore();\n        \n        \n        if (score == WINNING_SCORE) {\n            alert(\"Congratulations, you win! You managed to remember all previously selected images. You're a genius!\")\n            resetGame();\n        }\n        \n        setCards(shuffleCardsList(cards));\n    }, [score]);\n    \n    return (\n        <div className=\"App\">\n            <HeaderComponents\n                score={score}\n                highScore={highScore}\n                maxScoreToWin={WINNING_SCORE}\n            />\n            \n            <CardsSection\n                cards={cards}\n                onClick={(i) => handleClick(i)}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}